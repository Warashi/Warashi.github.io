#+HUGO_BASE_DIR: .
#+HUGO_AUTO_SET_LASTMOD: nil

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type 'post
:END:

** warashi.dev
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2019/03/01
:EXPORT_FILE_NAME: warashi-dev
:EXPORT_DATE: 2019-03-01T21:03:15+09:00
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases '("/post/2019/03/01/warashi.dev")
:END:

なんとなく ~.dev~ ドメインが話題になっていたので、独自ドメインを取得しました。
~warashi.dev~ です。このサイトも https://warashi.dev になりました。
Google Domains で取得したんですが、Github Pagesで独自ドメインを設定する時に、ALIASとかANAMEとかいうのにGoogle Domainsが対応してなくて、仕方なくAレコードを設定しました。
Aレコードを設定する方法だと、Github PagesのIPアドレスが変わるたびに設定をやり直さなきゃいけないので大変なんですよね。ANAME対応してくれないかなぁ。

** GitOps
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2019/02/24
:EXPORT_FILE_NAME: gitops
:EXPORT_DATE: 2019-02-24T14:24:46+09:00
:END:

このブログ更新するのすごい久しぶりだ…… :thinking:

GitOpsというやつを知って、やってみたいなって思ったんですね。で、GitHub Pagesって特定のbranchの中身が常に反映されるわけじゃないですか。これはGitOpsにぴったりなのでは！と思ってこのブログをGitOpsっぽくしました。

具体的には、記事を書く際には ~source~ branch に向けてPRを作ります。この時点ではまだmarkdownファイルとかで書かれています。このPRがマージされると、CircleCI上でHugoを動かして ~master~ branchに向けたPRを自動で作ります。このPRにはHTMLファイルなどのHugoの成果物が入っています。

で、最終確認をした後にこのPRをマージするとGitHub Pagesに反映されるってわけです。2回PRをマージしないといけないですけど、実際に出力されるHTMLの差分を確認してから反映することで何かうれしいことがあるかもしれない？ないかもしれないけど。
ないかもしれないって思ったんだけど、テーマ変えたりしてリニューアル作業をしていたらちょっとしたことでHugoの成果物が壊れてしまって、それを公開する前に気づけたのでやっぱりこの方式は有用だってことを確認できた。

上にも書いたけど、久しぶりに更新するついでにHugoのテーマも変えときました。

** CircleCI 2.0
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2017/11/29
:EXPORT_FILE_NAME: circleci
:EXPORT_DATE: 2017-11-29T18:57:20+09:00
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :aliases '("/post/2017/11/29/circleci-2.0")
:END:

このブログのHTML生成にはCircleCIでHugoを動かしているんですが、今までCircleCIのバージョン1を使っていたのをバージョン2に移行しました。
移行のためにDockerコンテナを作るところから始める、というちょっと面倒な事態になりましたが、なんとか移行完了したのでちょっと記事書くかなって感じです。

まず先にこのブログのリポジトリ構成をちょっと書いておくと、sourceブランチにHugoに渡すMarkdownとかがあって、masterブランチには生成されたHTMLとかがある、という構成になってます。
つまり、sourceブランチを取ってきて、Hugoを走らせて、結果public以下にできるファイル群をmasterブランチにpushすればいいことになります。

これをするために作ったDockerコンテナの[[https://github.com/Warashi/docker-alpine-hugo-git-ssh-rsync][GitHubリポジトリがこちら]]。
とりあえずalpineで、なんとなく使いそうだったコマンドを入れてある感じになります。

そして、[[https://github.com/Warashi/warashi.github.io/blob/source/.circleci/config.yml][CircleCIの設定ファイルがこちら]]。
これを参考にしてもらえば、このブログと同じことができるはずになってます。

誰かの助けになれば幸いです。

** 「そうだ Go、京都。」参加告報                                  :Go:勉強会:
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2017/04/29
:EXPORT_FILE_NAME: gokyoto
:EXPORT_DATE: 2017-04-29T20:15:58+09:00
:END:

本日、はてなさんで開かれた Go の勉強会に参加してきましたので、備忘録も兼ねて内容をメモしておこうと思います。

*** LTじゃないやつ

**** String::Random の Go 版を作った話 (by [[//twitter.com/t_snz][tさん]])
[[//blog.yux3.net/entry/2017/05/01/014200][ご本人の解説記事]]

[[//metacpan.org/pod/String%3A%3ARandom][String::Random]] という Perl のモジュールがあって、それを Go に移植したという話でした。
実装はこちら ([[//github.com/t-mrt/gocha][gocha]])

1. String::Random は正規表現に従ってランダムな文字列を生成するモジュールで、それをGoに移植するに当たってはじめは正規表現のパーサなどを実装していた。
2. とりあえずの実装はできたが、Unicode文字プロパティなどの対応が大変。さてどうするか。
3. *Goの標準ライブラリにはGoで書かれた正規表現エンジンがある。*
4. Goの ~regexp~ パッケージはVMなので、それを利用して文字列生成をする。
5. Unicode文字プロパティもiオプションも対応できた！

**** 毎日 Go を書く (by [[//twitter.com/y_uuk1][yuukiさん]])
githubの草を生やす活動を始めたので、それについての話とのこと

***** 大事なこと
- 1 commit / 1 day でもいいので毎日書くことが大事。継続は力なり。
- モチベーションが大事なので、それが維持されるなら ~git commit --date~ もあり。ただしやり過ぎ厳禁。
- 平日にはあまり時間がとれないので、土日に細かいIssueを用意しておいて平日に消化
- 一つのプロジェクトだと行き詰まったときに継続できなくなるので複数のプロジェクトを持つ
- 作るもののネタを見つけるのが大変
  - 業務で課題を見つけてそれを汎用化して解くなど

***** 利点
- 脳内メモリに乗った状態が保持されるので、次に書くときに悩まない
- 小さな変更を積み重ねる癖がつく
- 無理すると続かないので無理しなくなる

**** REST is not only (web) API interface (by [[//twitter.com/plan9user][kadotaさん]])
[[//speakerdeck.com/lufia/rest-is-not-only-web-api-interface][資料]]

プッシュ配信システムで REST API は辛いよ、とのこと

どう辛いかというと、シンプルに 1 request / 1 message / 1 user とすると、大量の request が発生する。
他のもの、たとえば gRPC, QraphQL などを使うことも検討に入れましょう。

**** Go で軽量マークアップ言語のパーサを書く (by [[//twitter.com/aereal][aerealさん]])
[[//b.hatena.ne.jp/aereal/2017gokyoto/][参考文献]]

Go ではてな記法のパーサを書いたという話でした。
実装はこちら ([[//github.com/aereal/go-text-hatena][go-text-hatena]])

はてな記法にははっきりとした定義がなく、実装が定義。
数えられるだけでも7つの実装がある。辛い。

実装には、goyacc および ~text/scanner~ パッケージを用いている。
インデントでネストを表現する場合はyaccでは辛いが、はてな記法はマーカ (+記号など) を重複させてネストを表現するという記法であり、それに助けられた。
標準入力から受け取って、ASTをJSON形式で標準出力にはき出すのでツールから使いやすい。

--------

*** LT
LTはメモ取ってなかったので完全に資料頼りの感想です。

**** encoding/csv (by [[//twitter.com/pinzolo][pinzoloさん]])
[[//speakerdeck.com/pinzolo/csv][資料]]

~csv.Reader~, ~csv.Writer~ が ~io.Reader~, ~io.Writer~ ではないのは知ってたんですが、改めて言われると不思議な感じですね。
csvっぽい形式を読み込んだりすることはあったんですが、 encoding/csv は発表であったとおり融通がきかなくて使ってませんでした。
というか、ちゃんとしたcsvじゃなくてそれっぽい形式を扱ってただけだったのが大きい。
また使ってみようと思います。

**** Server Push Middleware "Plasma" (by [[//twitter.com/stormcat24][stormcat24さん]])
[[//speakerdeck.com/stormcat24/server-push-middleware-plasma][資料]]

東京から来ててすごいなって思ったら天皇賞のついでらしかった。
ポーリング撲滅のためにミドルウェアを作ったって話でした。
作ったとはいうものの、実装は[[//twitter.com/upamune][インターン生]]がほぼ一人でやったとのこと。すごい。
インターン生の書いたブログ記事は[[//upamune.hatenablog.com/entry/2017/04/07/165658][これ]]っぽい。

**** パッケージの公開方法 (by [[//twitter.com/kwmt27][kwmt27さん]])
[[//go-talks.appspot.com/github.com/kwmt/go-talks/2017/souda-kyoto-go.slide][資料]]

なんと14:30ごろに参加申し込みしてLTなされている。すごい。
パッケージの公開方法についての話でした。

**** そうだ Go、再確認。 (by [[//twitter.com/qt_luigi][qt_luigiさん]])
[[//speakerdeck.com/qt_luigi/souda-go-zai-que-ren][資料]]

Go の基礎的な事柄に対するお話でした。
再確認できてよかったです。

**** Go 合宿 (by [[//twitter.com/maro_kt][maro_ktさん]])
[[//go-beginners.connpass.com/event/47481/][Go合宿]]の参加報告でした。
土善旅館はいいぞ。

** ブログはじめました
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2017/04/22
:EXPORT_FILE_NAME: blog_created
:EXPORT_DATE: 2017-04-22T09:03:51+09:00
:END:

[[//gohugo.io][Hugo]] を使ってブログを始めました。
ブログの生成元ファイル群は[[//github.com/Warashi/warashi.github.io][ここ]]にあります。
[[//circleci.com][Circle CI]] を使って1リポジトリの複数ブランチでソースと生成結果を管理してます。
よかったら参考にどうぞ。

Theme には [[//github.com/pdevty/amp][AMP]] を使ってます。
シンプルでよいテーマだと思います。

ちょっとだけ説明しておくと、 ~public~ ディレクトリを ~submodule~ にしておいて、更新の直前で ~git checkout master~ するっていうなんとも変則的な方法を使ってます。
なんとなく ~circle.yml~ や環境変数にリポジトリ名を入れたくなかったのでこうなりました。

どんなことを書くかはまだ未定ですが、やる気の起きた日に更新していきます。

** about Warashi
:PROPERTIES:
:EXPORT_HUGO_SECTION: .
:EXPORT_FILE_NAME: about
:EXPORT_DATE: 2000-01-01T00:00:00+09:00
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type 'page
:END:

ざしきわらし。名前の由来は大学時代にサークルのBOXに居座りすぎてまるでざしきわらしのようだと言われたことから。そのせいで留年を重ねたのはいい思い出。留年も悪くないよ。

GitHub: [[https://github.com/Warashi][Warashi]]
X: [[https://x.com/warashi___][@warashi___]]

* Footnotes
* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
