#+HUGO_AUTO_SET_LASTMOD: nil
#+HUGO_LOCALE: ja

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type 'post
:END:

** Go Commits in This Week at 2022-05-21                                 :Go:
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2022/05/23
:EXPORT_FILE_NAME: go-commits-in-this-week
:EXPORT_DATE: 2022-05-23T07:29:53+09:00
:END:

*** [[https://github.com/golang/go/commit/41b9d8c75e45636a153c2a31d117196a22a7fc6c][time: add Time.ZoneBounds ? golang/go@41b9d8c]]
~time.ZoneBounds~ という関数が追加されるようです。
テストコードも見たんですが、何をするための関数なのかよくわかりませんでした…。

*** [[https://github.com/golang/go/commit/770e0e584a98dfd5e8d0d00558085c339fda0ed7][net/http: allow sending 1xx responses ? golang/go@770e0e5]]
net/http で 1xx 系のレスポンスを返せるようにする変更です。
今までは返せなかったことにちょっと驚きました。

*** [[https://github.com/golang/go/commit/668041ef66ddafffccf1863e6180b83ea1ad30c9][fmt: add Append, Appendln, Appendf ? golang/go@668041e]]
~fmt~ package に関数が追加されたようです。
いままで ~strings.Builder~ や ~bytes.Buffer~ を ~io.Writer~ にして、 ~fmt.Fprint~ 系の関数でやっていたことを ~[]byte~ に対して直接行えるようにする変更のように見えますね。

** Go Commits in This Week at 2022-05-14                                 :Go:
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2022/05/14
:EXPORT_FILE_NAME: go-commits-in-this-week
:EXPORT_DATE: 2022-05-14T10:45:03+09:00
:END:

*** [[https://github.com/golang/go/commit/831f1168289e65a7ef49942ad8d16cf14af2ef43][math/big: don't force second arg to Jacobi and Int.ModSqrt to escape · golang/go@831f116]]
Goはコンパイル時のエスケープ解析で変数のアロケート場所がスタックとヒープに決まります。
このコミットはほんのちょっとの変更でスタックにアロケートできたという変更です。
普段僕たちが書く時はここまでカリカリのチューニングをする前にもうちょっと他の改善がありそうですが、もし必要になったときは参考にできそうですね。

*** [[https://github.com/golang/go/commit/df57592276bc26e2eb4e4ca5e77e4e2e422c7c6b][archive/zip: permit zip files to have prefixes · golang/go@df57592]]
自己展開型のzipファイルなどはzipファイルの先頭に自分自身を展開するためのコードが入っています。
今までのコードではそれをうまく取り扱えていなかったのを、取り扱えるようにしたという変更です。

*** [[https://github.com/golang/go/commit/53f13128a7a4c7d16af5ea9ca5f25b56ff9881fe][internal/abi, internal/buildcfg: enable regabi on riscv64 by default · golang/go@53f1312]]
Go 1.17から内部のABIを徐々にレジスタベースに変更しているのですが、それをRISC-Vに適用するという変更ですね。

*** [[https://github.com/golang/go/commit/1ce7fcf139417d618c2730010ede2afb41664211][net/http: close accepted connection · golang/go@1ce7fcf]]
**** [[https://github.com/golang/go/commit/c14ed5b37c6cc387b29a7939cad7c7cbccd59934][Revert "net/http: close accepted connection" · golang/go@c14ed5b]]
net/httpのServerはShutdownを呼ばれたときにコネクションをcloseします。
それが一部うまくいっていなかったのを修正した…のですが、graceful shutdownでバグがあったようでrevertされています。

*** [[https://github.com/golang/go/commit/59ef3a966b38cb2ac537d1be43f0b8fd2468ea70][go/doc: group play example imports · golang/go@59ef3a9]]
Goは ExampleXXX というテストを書くと pkg.go.dev 上で実行可能な例として表示されます。
その例を表示する際に、importのグルーピング[fn:import-grouping] を壊してしまっていたのを壊さないようにする変更です。

[fn:import-grouping] importを空行で分割して複数のグループがあるように見せること。

*** [[https://github.com/golang/go/commit/bf68170c638e7e69bedcc64fadfd83354fd06c10][go/printer: align expression list elements containing tabs · golang/go@bf68170]]
タブ文字がstring literal中などインデント以外で使われているときにgofmtの挙動がおかしかったようです。

*** [[https://github.com/golang/go/commit/7b314d27ce5dbc31eed2076e28c0af4ea8c24473][cmd/compile: fix bad order of evaluation for multi-value f()(g()) calls · golang/go@7b314d2]]
このような呼び出しが記述されているとき、言語仕様に従うなら ~f()~ → ~t1()~ → ~t2()~ の順に評価されます。
これが、現在は違う順序での評価となっていたものを修正するコミットです。
#+begin_src go
  f()(t1(), t2())
#+end_src

*** [[https://github.com/golang/go/commit/536282763f7357edd81d85993c12fd977fecd378][go/build: replace ioutil.ReadDir with os.ReadDir · golang/go@5362827]]
~ioutil.ReadDir~ を ~os.ReadDir~ に置き換えるPRです。
Go1.16からioutilは他のパッケージに同等のものが実装され、新しいコードでのioutilの利用は推奨されていません。
Go内部でもまだ利用があった箇所を修正するコミットですが、これだけでパフォーマンスが上がるので積極的に置き換えていきたいですね。

*** [[https://github.com/golang/go/commit/016d7552138077741a9c3fdadc73c0179f5d3ff7][runtime: measure stack usage; start stacks larger if needed · golang/go@016d755]]
stackの利用状況を計測して、goroutineを立ち上げるときに必要そうならあらかじめ大きなスタックを確保して起動するという変更です。

*** [[https://github.com/golang/go/commit/540f8c2b50f5def060244853673ccfc94d2d3e43][cmd/compile: use jump table on ARM64 · golang/go@540f8c2]]
ARM64 において、switch-caseでジャンプテーブルが使われるようになっています。
これによってパフォーマンス改善が行われています。

** Go Commits in This Week at 2022-05-07                                 :Go:
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2022/05/07
:EXPORT_FILE_NAME: go-commits-in-this-week
:EXPORT_DATE: 2022-05-07T08:10:50+09:00
:END:

[[https://github.com/golang/go]] に今週あったコミットのうち、僕の目にとまったもをの書いていきます。

*** [[https://github.com/golang/go/commit/349cc83389f71c459b7820b0deecdf81221ba46c][os/exec: return error when PATH lookup would use current directory · golang/go@349cc83 · GitHub]]
先週リバートされていたもののリトライのようです。
リバートの原因は x/sys/execabs のテストが壊れたからでしたが、対策をしたとのことでした。

*** [[https://github.com/golang/go/commit/f771edd7f92a47c276d65fbd9619e16a786c6746][all: REVERSE MERGE dev.boringcrypto (cdcb4b6) into master · golang/go@f771edd · GitHub]]
別ブランチで開発が進んでいたBoringSSLベースの？暗号まわりの実装が取り込まれたようです。
[[https://github.com/golang/go/commit/dcdcc3844046af0182cd3a94c7bb78c99908020e][[dev.boringcrypto] add README.boringcrypto.md, update VERSION · golang/go@dcdcc38 · GitHub]] にあるREADMEを見るにもともとmasterに取り込む予定はなかったようですが、取り込まれたみたいですね。

*** [[https://github.com/golang/go/commit/0537a74b76fcab1398da6699c3ff7411fef8fbe7][io: NopCloser forward WriterTo implementations if the reader supports it · golang/go@0537a74 · GitHub]]
~io.NopCloser~ に渡した ~io.Reader~ が ~io.WriterTo~ を実装していた場合に、返ってくる ~io.ReadCloser~ も ~io.WriterTo~ を実装するようになりました。
~io.WriterTo~ に高速な実装がある場合に使われるようになったということですね。

*** [[https://github.com/golang/go/commit/01359b46815e63307077dfa03972f40d2e0d94fe][runtime: add GC CPU utilization limiter · golang/go@01359b4 · GitHub]]
このコミットには以下の2つの内容が含まれているようです

- GCが使うCPUが最大で50%まで程度になるように制限をかける
- プログラムが使うメモリに制限をかけられるようにするためのfeature flagの導入

GCが50%もCPUを使うのはまれだとは思いますが、制限がかかるのはうれしいですね。
また、メモリ使用量に制限をかけられるのはコンテナでの利用などでうれしいのではないでしょうか。

*** [[https://github.com/golang/go/commit/f01c20bf2ba889e5c9e3565175cc4276f9c11516][runtime/debug: export SetMemoryLimit · golang/go@f01c20b · GitHub]]
ひとつ上の項目で導入されたメモリ制限をかける機能を ~runtime/debug~ package から扱えるようにするコミットですね。
環境変数からセットする必要がなくなるのでうれしいかも？

*** [[https://github.com/golang/go/commit/52bd1c4d6cc691aa60c71513695dba03062deb59][runtime: decrease STW pause for goroutine profile · golang/go@52bd1c4 · GitHub]]
goroutineのプロファイルを取得するときの処理に改善が行われ、Stop The Worldが減ったようです。
おそらく ~runtime/pprof~ でプロファイルを取得するときのSTWも減っているはずなので、いままでよりも気軽にプロファイルを取得できるようになりますね。

*** [[https://github.com/golang/go/commit/f52b4ec63d6ce5c4eb9edcb81c3a0661e6f53da0][cmd/compile: enable Asan check for global variables · golang/go@f52b4ec · GitHub]]
[runtime: enable address sanitizer in Go · Issue #44853 · golang/go · GitHub](https://github.com/golang/go/issues/44853) に紐付くコミットで、address sanitizerを使ってグローバル変数へのだめなアクセスを検出するオプションが追加されたようです。

*** [[https://github.com/golang/go/commit/ffe48e00adf3078944015186819a1ed5c6aa8bec][sync/atomic: add typed atomic values · golang/go@ffe48e0 · GitHub]]
~sync/atomic~ packageに以下の型が追加され、atomicであることが型レベルで保証できるようになりました。
いままでは ~go.uber.org/atomic~ を用いていたところが標準パッケージに（一部）取り込まれた感じでしょうか。

- ~Bool~
- ~Int32~
- ~Int64~
- ~Pointer[T]~
- ~Uint32~
- ~Uint64~
- ~Uintptr~

ref; [atomic package - sync/atomic - pkg.go.dev](https://pkg.go.dev/sync/atomic@master)

*** [[https://github.com/golang/go/commit/e1e056fa6a2f788a15e17d55b7953712053fd760][cmd/compile: fold constants found by prove · golang/go@e1e056f · GitHub]]
ちょっとだけ賢い最適化が追加されたようです
たとえばこんな感じの最適化が行われるようになるとのこと

- from
  #+begin_src go
  if x == 20 {
    return x + 30 + z
  }

  #+end_src
- into
  #+begin_src go
  if x == 20 {
    return 50 + z
  }
  #+end_src

*** [[https://github.com/golang/go/commit/fdb640b7a1324c2a4fc579389c4bc287ea90f1db][crypto/x509: disable signing with MD5WithRSA · golang/go@fdb640b · GitHub]]
MD5はもう暗号や署名の用途で大丈夫なハッシュではなくなったので、MD5での署名の検証や署名の実行はできなくするようです。
危ない物は使わせない、いい方針だと思います。

** Go Commits in this Week at 2022-04-30                                 :Go:
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2022/04/30
:EXPORT_FILE_NAME: go-commits-in-this-week
:EXPORT_DATE: 2022-04-30T11:43:23+09:00
:END:

[[https://github.com/golang/go]] に今週あったコミットのうち、僕の目にとまったもをの書いていきます。

*** [[https://github.com/golang/go/commit/415e3fd8a6e62d7e9cf7d0c995518179dc0b7723][slices: use !{{Less}} instead of {{GreaterOrEqual}}]]
sortで ~a~ と ~b~ を比較する際に ~a >= b~ を使うか ~!(a < b)~ を使うかによって結果が変わってしまうから元に戻すよ、ということのようです。
この2つは一見同じように見えるのですが、浮動小数点数で ~NaN~ が混じっているときに同じ結果ではなくなります。

#+begin_src go
package main

import (
	"fmt"
	"math"

	"golang.org/x/exp/constraints"
)

func compare[T constraints.Ordered](a, b T) bool {
	return !(a < b) == (a >= b)
}

func main() {
	fmt.Println("1 and 2:", compare(1, 2))
	fmt.Println("Inf and 0:", compare(math.Inf(1), 0))
	fmt.Println("Inf and Inf:", compare(math.Inf(1), math.Inf(1)))
	fmt.Println("NaN and 1:", compare(math.NaN(), 1))
	fmt.Println("NaN and NaN:", compare(math.NaN(), math.NaN()))
}
#+end_src

Playground: [[https://go.dev/play/p/iAMjcAgU8pz]]

*** [[https://github.com/golang/go/commit/24b570354caee33d4fb3934ce7ef1cc97fb403fd][time: document hhmmss formats]]
~(time.Time).Format~ のフォーマット指定文字列、時差の部分について、もともと秒単位まで指定が可能だったにもかかわらずドキュメントに示されていなかったようです。
とはいえ秒単位で時差のある地域はないはずなので、これを使う機会はくるのか…… :thinking: という感じではありますが。

*** [[https://github.com/golang/go/commit/f0ee7fda636408b4f04ca3f3b11788f662c90610][crypto/tls: remove tls10default GODEBUG flag]]
~GODEBUG~ 環境変数で TLS 1.0 を有効にする指定があったのですが、それが無効になったようです。
コード中でconfigから有効にする手段はのこっていますが、TLS 1.0は今となっては古くて脆弱……？ですし1.0を使うのはもうやめにしたいですね。

*** [[https://github.com/golang/go/commit/3ce203db80cd1f320f0c597123b918c3b3bb0449][os/exec: return error when PATH lookup would use current directory]]
~golang.org/x/sys/execabs~ と同様に、os/execで実行しようとしたコマンドがカレントディレクトリの実行ファイルだった場合にエラーを返すようになったようです。
もともとWindowsでのみの挙動（のはず）ですが、それがUnix環境と同様になった感じですかね。
おそらく、こちらでGit LFSの脆弱性としてあげられていたことに対する対処だと思われます。
ref; [[https://forest.watch.impress.co.jp/docs/news/1404405.html][「Git for Windows」v2.36.0が公開 ～「Git LFS」の脆弱性に対処]]

**** [[https://github.com/golang/go/commit/f2b674756b3b684118e4245627d4ed8c07e518e7][Revert "os/exec: return error when PATH lookup would use current directory"]]
と思ったらrevertされてました。どうも ~x/sys/execabs~ のテストを壊してしまったようです。

** Signed HTTP Exchanges (SXG) と Accelerated Mobile Pages (AMP)
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2019/03/16
:EXPORT_FILE_NAME: sxg_and_amppackager
:EXPORT_DATE: 2019-03-16T11:33:29+09:00
:END:

まだDraftなんですが、 Signed HTTP Exchanges という規格があります。
規格そのものについて詳しくはJxckさんのブログ記事 [[https://blog.jxck.io/entries/2018-12-01/signed-http-exchanges.html][WebPackaging の Signed HTTP Exchanges]] を参照してもらえるといいと思います。

この応用先として、Accelerated Mobile Pages (AMP)を表示する際にオリジナルのURLで表示するというものがあります。SXGを使わない（この記事執筆時点での一般的な状態）のAMPはGoogleだったりAMPProjectのドメインで配信されているはずです。これを、SXGをうまく使ってやることで配信はGoogleなどのAMPキャッシュから行うが、ブラウザのURLバーに表示するのはオリジナルのURLにするということが実現できます。

これを実現するためには、Google Botがクロールしに来た時にSXGがあるということを伝えてやったり、実際にSXGを生成して返してやる必要があります。そのための[[https://github.com/ampproject/amppackager][*AMP Packager* というツール]]がAMP Projectによって公開されています。

今回、origin、AMP Packagerと、必要に応じてAMP Packagerにアクセスを向けるReverse Proxyの3つをdocker-composeでローカルで動かして動作確認するということをやったのでそれについて解説したいと思います。

AMP PackagerのREADMEにも書いてありますが、Reverse Proxyでの処理は下記のようになります。

1. ~/amppkg/~ 以下はそのままAMP Packagerに向ける
2. リクエストに ~AMP-Cache-Transform~ ヘッダがある場合は ~/priv/doc/$scheme://$server_name$request_uri~ にrewriteしてAMP Packagerに向ける
    - ~/priv/doc/~ 以下に直接アクセスがあった場合にはAMP Packagerに向け *ない*
3. その他のリクエストはそのままOriginに向ける

また、その他の注意点として、AMPページに対する最終的なレスポンスの ~Vary~ ヘッダーに ~AMP-Cache-Transform~ と ~Accept~ を入れてやる必要があります。

それ以外に今回はまったポイントがあるんですが、それはオレオレ証明書を使っていることが原因でした。
具体的には

1. AMP Packagerが使う証明書にはOCSP Serverの情報がないこと。
2. AMP PackagerからOriginへのfetchがHTTPSで行われる際の証明書エラーが起きる。
3. Chromeに起動オプションを渡してやらないと証明書エラーが起きる。

それぞれ、下記で解決できました。

1. amppkgコマンドを実行する前にopensslコマンドでocsp responseを生成してやる。このときopensslコマンドの出力先に、amppkg.tomlで指定したOCSP Cacheのパスを指定する。コマンドは下記。
  #+begin_src bash
    touch index.txt index.txt.attr
    openssl ocsp -noverify -index ./index.txt -rsigner ca.ocsp.cert -rkey ca.privkey -CA ca.cert -ndays 7 -issuer ca.cert -cert server.cert -respout /tmp/amppkg-ocsp
  #+end_src
2. オレオレ認証局の証明書をあらかじめシステムに登録してやる。
3. Chromeの起動オプション ~--ignore-certificate-errors-spki-list~ にカンマ区切りで証明書の情報を渡してやる。
    - 渡す情報は各証明書（ ~server.cert~ ）に対して下記コマンドで取得できる。渡す必要があるのは、TLSに使う証明書とSXGに使う証明書の2つ。
  #+begin_src bash
    cat server.cert | openssl x509 -pubkey | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | base64
  #+end_src

使ったコードは [[https://github.com/Warashi/try-amppackager]] で公開していますのでぜひ参考にしてください。

** warashi.dev
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2019/03/01
:EXPORT_FILE_NAME: warashi-dev
:EXPORT_DATE: 2019-03-01T21:03:15+09:00
:EXPORT_HUGO_ALIASES: /post/2019/03/01/warashi.dev
:END:

なんとなく ~.dev~ ドメインが話題になっていたので、独自ドメインを取得しました。
~warashi.dev~ です。このサイトも https://warashi.dev になりました。
Google Domains で取得したんですが、Github Pagesで独自ドメインを設定する時に、ALIASとかANAMEとかいうのにGoogle Domainsが対応してなくて、仕方なくAレコードを設定しました。
Aレコードを設定する方法だと、Github PagesのIPアドレスが変わるたびに設定をやり直さなきゃいけないので大変なんですよね。ANAME対応してくれないかなぁ。

** GitOps
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2019/02/24
:EXPORT_FILE_NAME: gitops
:EXPORT_DATE: 2019-02-24T14:24:46+09:00
:END:

このブログ更新するのすごい久しぶりだ…… :thinking:

GitOpsというやつを知って、やってみたいなって思ったんですね。で、GitHub Pagesって特定のbranchの中身が常に反映されるわけじゃないですか。これはGitOpsにぴったりなのでは！と思ってこのブログをGitOpsっぽくしました。

具体的には、記事を書く際には ~source~ branch に向けてPRを作ります。この時点ではまだmarkdownファイルとかで書かれています。このPRがマージされると、CircleCI上でHugoを動かして ~master~ branchに向けたPRを自動で作ります。このPRにはHTMLファイルなどのHugoの成果物が入っています。

で、最終確認をした後にこのPRをマージするとGitHub Pagesに反映されるってわけです。2回PRをマージしないといけないですけど、実際に出力されるHTMLの差分を確認してから反映することで何かうれしいことがあるかもしれない？ないかもしれないけど。
ないかもしれないって思ったんだけど、テーマ変えたりしてリニューアル作業をしていたらちょっとしたことでHugoの成果物が壊れてしまって、それを公開する前に気づけたのでやっぱりこの方式は有用だってことを確認できた。

上にも書いたけど、久しぶりに更新するついでにHugoのテーマも変えときました。

** CircleCI 2.0
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2017/11/29
:EXPORT_FILE_NAME: circleci
:EXPORT_DATE: 2017-11-29T18:57:20+09:00
:EXPORT_HUGO_ALIASES: /post/2017/11/29/circleci-2.0
:END:

このブログのHTML生成にはCircleCIでHugoを動かしているんですが、今までCircleCIのバージョン1を使っていたのをバージョン2に移行しました。
移行のためにDockerコンテナを作るところから始める、というちょっと面倒な事態になりましたが、なんとか移行完了したのでちょっと記事書くかなって感じです。

まず先にこのブログのリポジトリ構成をちょっと書いておくと、sourceブランチにHugoに渡すMarkdownとかがあって、masterブランチには生成されたHTMLとかがある、という構成になってます。
つまり、sourceブランチを取ってきて、Hugoを走らせて、結果public以下にできるファイル群をmasterブランチにpushすればいいことになります。

これをするために作ったDockerコンテナの[[https://github.com/Warashi/docker-alpine-hugo-git-ssh-rsync][GitHubリポジトリがこちら]]。
とりあえずalpineで、なんとなく使いそうだったコマンドを入れてある感じになります。

そして、[[https://github.com/Warashi/warashi.github.io/blob/source/.circleci/config.yml][CircleCIの設定ファイルがこちら]]。
これを参考にしてもらえば、このブログと同じことができるはずになってます。

誰かの助けになれば幸いです。
** 「そうだ Go、京都。」参加告報                                  :Go:勉強会:
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2017/04/29
:EXPORT_FILE_NAME: gokyoto
:EXPORT_DATE: 2017-04-29T20:15:58+09:00
:END:

本日、はてなさんで開かれた Go の勉強会に参加してきましたので、備忘録も兼ねて内容をメモしておこうと思います。

*** LTじゃないやつ

**** String::Random の Go 版を作った話 (by [[//twitter.com/t_snz][tさん]])
[[//blog.yux3.net/entry/2017/05/01/014200][ご本人の解説記事]]

[[//metacpan.org/pod/String%3A%3ARandom][String::Random]] という Perl のモジュールがあって、それを Go に移植したという話でした。
実装はこちら ([[//github.com/t-mrt/gocha][gocha]])

1. String::Random は正規表現に従ってランダムな文字列を生成するモジュールで、それをGoに移植するに当たってはじめは正規表現のパーサなどを実装していた。
2. とりあえずの実装はできたが、Unicode文字プロパティなどの対応が大変。さてどうするか。
3. *Goの標準ライブラリにはGoで書かれた正規表現エンジンがある。*
4. Goの ~regexp~ パッケージはVMなので、それを利用して文字列生成をする。
5. Unicode文字プロパティもiオプションも対応できた！

**** 毎日 Go を書く (by [[//twitter.com/y_uuk1][yuukiさん]])
githubの草を生やす活動を始めたので、それについての話とのこと

***** 大事なこと
- 1 commit / 1 day でもいいので毎日書くことが大事。継続は力なり。
- モチベーションが大事なので、それが維持されるなら ~git commit --date~ もあり。ただしやり過ぎ厳禁。
- 平日にはあまり時間がとれないので、土日に細かいIssueを用意しておいて平日に消化
- 一つのプロジェクトだと行き詰まったときに継続できなくなるので複数のプロジェクトを持つ
- 作るもののネタを見つけるのが大変
  - 業務で課題を見つけてそれを汎用化して解くなど

***** 利点
- 脳内メモリに乗った状態が保持されるので、次に書くときに悩まない
- 小さな変更を積み重ねる癖がつく
- 無理すると続かないので無理しなくなる

**** REST is not only (web) API interface (by [[//twitter.com/plan9user][kadotaさん]])
[[//speakerdeck.com/lufia/rest-is-not-only-web-api-interface][資料]]

プッシュ配信システムで REST API は辛いよ、とのこと

どう辛いかというと、シンプルに 1 request / 1 message / 1 user とすると、大量の request が発生する。
他のもの、たとえば gRPC, QraphQL などを使うことも検討に入れましょう。

**** Go で軽量マークアップ言語のパーサを書く (by [[//twitter.com/aereal][aerealさん]])
[[//b.hatena.ne.jp/aereal/2017gokyoto/][参考文献]]

Go ではてな記法のパーサを書いたという話でした。
実装はこちら ([[//github.com/aereal/go-text-hatena][go-text-hatena]])

はてな記法にははっきりとした定義がなく、実装が定義。
数えられるだけでも7つの実装がある。辛い。

実装には、goyacc および ~text/scanner~ パッケージを用いている。
インデントでネストを表現する場合はyaccでは辛いが、はてな記法はマーカ (+記号など) を重複させてネストを表現するという記法であり、それに助けられた。
標準入力から受け取って、ASTをJSON形式で標準出力にはき出すのでツールから使いやすい。

--------

*** LT
LTはメモ取ってなかったので完全に資料頼りの感想です。

**** encoding/csv (by [[//twitter.com/pinzolo][pinzoloさん]])
[[//speakerdeck.com/pinzolo/csv][資料]]

~csv.Reader~, ~csv.Writer~ が ~io.Reader~, ~io.Writer~ ではないのは知ってたんですが、改めて言われると不思議な感じですね。
csvっぽい形式を読み込んだりすることはあったんですが、 encoding/csv は発表であったとおり融通がきかなくて使ってませんでした。
というか、ちゃんとしたcsvじゃなくてそれっぽい形式を扱ってただけだったのが大きい。
また使ってみようと思います。

**** Server Push Middleware "Plasma" (by [[//twitter.com/stormcat24][stormcat24さん]])
[[//speakerdeck.com/stormcat24/server-push-middleware-plasma][資料]]

東京から来ててすごいなって思ったら天皇賞のついでらしかった。
ポーリング撲滅のためにミドルウェアを作ったって話でした。
作ったとはいうものの、実装は[[//twitter.com/upamune][インターン生]]がほぼ一人でやったとのこと。すごい。
インターン生の書いたブログ記事は[[//upamune.hatenablog.com/entry/2017/04/07/165658][これ]]っぽい。

**** パッケージの公開方法 (by [[//twitter.com/kwmt27][kwmt27さん]])
[[//go-talks.appspot.com/github.com/kwmt/go-talks/2017/souda-kyoto-go.slide][資料]]

なんと14:30ごろに参加申し込みしてLTなされている。すごい。
パッケージの公開方法についての話でした。

**** そうだ Go、再確認。 (by [[//twitter.com/qt_luigi][qt_luigiさん]])
[[//speakerdeck.com/qt_luigi/souda-go-zai-que-ren][資料]]

Go の基礎的な事柄に対するお話でした。
再確認できてよかったです。

**** Go 合宿 (by [[//twitter.com/maro_kt][maro_ktさん]])
[[//go-beginners.connpass.com/event/47481/][Go合宿]]の参加報告でした。
土善旅館はいいぞ。

** ブログはじめました
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: 2017/04/22
:EXPORT_FILE_NAME: blog_created
:EXPORT_DATE: 2017-04-22T09:03:51+09:00
:END:

[[//gohugo.io][Hugo]] を使ってブログを始めました。
ブログの生成元ファイル群は[[//github.com/Warashi/warashi.github.io][ここ]]にあります。
[[//circleci.com][Circle CI]] を使って1リポジトリの複数ブランチでソースと生成結果を管理してます。
よかったら参考にどうぞ。

Theme には [[//github.com/pdevty/amp][AMP]] を使ってます。
シンプルでよいテーマだと思います。

ちょっとだけ説明しておくと、 ~public~ ディレクトリを ~submodule~ にしておいて、更新の直前で ~git checkout master~ するっていうなんとも変則的な方法を使ってます。
なんとなく ~circle.yml~ や環境変数にリポジトリ名を入れたくなかったのでこうなりました。

どんなことを書くかはまだ未定ですが、やる気の起きた日に更新していきます。

** about Warashi
:PROPERTIES:
:EXPORT_HUGO_SECTION: .
:EXPORT_FILE_NAME: about
:EXPORT_DATE: 2000-01-01T00:00:00+09:00
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :type 'page
:END:

ざしきわらし。名前の由来は大学時代にサークルのBOXに居座りすぎてまるでざしきわらしのようだと言われたことから。そのせいで留年を重ねたのはいい思い出。留年も悪くないよ。

GitHub: [[https://github.com/Warashi][Warashi]]
X: [[https://x.com/warashi___][@warashi___]]

* Footnotes
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
